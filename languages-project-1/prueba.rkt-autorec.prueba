#lang racket

;; A module to create the Board
(provide initialize display-moves)
(require 2htdp/image)
(require 2htdp/universe)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; IMPLEMENTATION ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define size 150)
(define box (rectangle size size 'outline 'black))
(define 3-boxes (beside box box box))
(define display-text (text "Hello" 24 "orange"))
(define text-area (rectangle (* 3 size) (/ size 3)  'outline 'white))
(define ttt-brd (above 3-boxes 3-boxes 3-boxes text-area))

(define win-state-1 (list 1 2 3))
(define win-state-2 (list 4 5 6)) 
(define win-state-3 (list 7 8 9))
(define win-state-4 (list 1 4 7)) 
(define win-state-5 (list 2 5 8)) 
(define win-state-6 (list 3 6 9)) 
(define win-state-7 (list 1 5 9)) 
(define win-state-8 (list 3 5 7)) 
(define win-states (list win-state-1 win-state-2 win-state-3 win-state-4
                         win-state-5 win-state-6 win-state-7 win-state-8))

(define (display-moves brd x y me)
  (if (game-over? brd)
      brd
      (local [(define (on-sq? n)
                (and (<= (abs (- (first (gridsq n)) x)) (/ size 2))
                     (<= (abs (- (second (gridsq n)) y)) (/ size 2))
                     (string=? me "button-down")))

              (define (create-board n player)
                (cond [(and (= (length (second brd)) 3) (= (length (third brd)) 3))
                       (cond [(and (eq? player 'p) (eq? (first brd) 'p) (member n (second brd)))
                              (list 'p (remove n (second brd))
                                    (third brd)
                                    (append (fourth brd) (list n)))]
                             [(and (eq? player 'c) (eq? (first brd) 'c) (member n (third brd)))
                              (list 'c (second brd)
                                    (remove n (third brd))
                                    (append (fourth brd) (list n)))]
                             [else brd])]
                      [else (if (and (not (member n (second brd)))
                                     (not (member n (third brd)))
                                     (eq? player (first brd)))
                                (if (eq? player 'p)
                                    (list 'c (append (second brd) (list n))
                                          (third brd)
                                          (remove n (fourth brd)))
                                    (list 'p (second brd)
                                          (append (third brd) (list n))
                                          (remove n (fourth brd))))
                                brd)]))]

        (cond
          [(on-sq? 1) (create-board 1 (first brd))]
          [(on-sq? 2) (create-board 2 (first brd))]
          [(on-sq? 3) (create-board 3 (first brd))]
          [(on-sq? 4) (create-board 4 (first brd))]
          [(on-sq? 5) (create-board 5 (first brd))]
          [(on-sq? 6) (create-board 6 (first brd))]
          [(on-sq? 7) (create-board 7 (first brd))]
          [(on-sq? 8) (create-board 8 (first brd))]
          [(on-sq? 9) (create-board 9 (first brd))]
          [else brd]))))


(define (member? x lst) (not (false? (member x lst))))

(define (game-over? brd)
  (or(empty? (fourth brd))
     (win? (second brd))
     (win? (third brd))))

(define (win? moves)
  (ormap (lambda (win-state)
           (andmap (lambda (ele-in-ws) (member? ele-in-ws moves)) win-state))
         win-states))

(define (display-winner brd)
  (let ([current-board (foldr (lambda (n im) (p-moves n im))
                              (foldr c-moves ttt-brd (second brd))
                              (third brd))])
    (cond [(win? (second brd)) (place-image (text "¡Jugador 1 ha ganado!" (floor (/ size 4)) 'green)
                                            (floor (* 1.5 size))
                                            (floor (+ (* 3.15 size)))
                                            current-board)]
          [(win? (third brd)) (place-image (text "¡Jugador 2 ha ganado!" (floor (/ size 4)) 'green)
                                           (floor (* 1.5 size))
                                           (floor (+ (* 3.15 size)))
                                           current-board)]
          [else brd])))

  


(define (initialize brd)
  (if (game-over? brd)
      (display-winner brd)
      (begin
        (place-image
         (cond [(eq? (first brd) 'p) (text "Jugador 1" (floor (/ size 6)) 'blue)]
               [(eq? (first brd) 'c) (text "Jugador 2" (floor (/ size 6)) 'red)]
               [else (error "initialize: Jugador no válido")])
         (floor (* 1.5 size))
         (floor (+ (* 3.15 size)))
         (foldr (lambda (n im) (p-moves n im))
                (foldr c-moves ttt-brd (second brd))
                (third brd))))))




(define (c-moves n im)
  (place-image (text "O" (/ size 2) 'blue)
               (first (gridsq n))
               (second (gridsq n))
               im))

(define (p-moves n im)
  (place-image (text "X" (/ size 2) 'red)
               (first (gridsq n))
               (second (gridsq n))
               im))
 (define (c-turn brd)
    (if (game-over? brd)
      brd
  (cond [(game-over? brd) (display-winner brd)]
        [else brd]))) 

(define (gridsq n)
  (cond
    [(= n 1)(grid 1 1)]
    [(= n 2)(grid 2 1)]
    [(= n 3)(grid 3 1)]
    [(= n 4)(grid 1 2)]
    [(= n 5)(grid 2 2)]
    [(= n 6)(grid 3 2)]
    [(= n 7)(grid 1 3)]
    [(= n 8)(grid 2 3)]
    [(= n 9)(grid 3 3)]))


(define (grid x y)
  (list (* size (- x .5)) (* size (- y .5))))

(define brd (list 'p '() '() '(1 2 3 4 5 6 7 8 9)))

(big-bang brd
  (to-draw initialize)
  (on-mouse display-moves)
  (on-tick c-turn))